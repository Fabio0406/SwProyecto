<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard - Render AI</title>
  <link rel="icon" href="public/images/favicon.png">
  <link rel="stylesheet" href="/public/css/styles2.css">
  <style>
    /* Dashboard Principal */
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background-color: #0a0a0a;
      color: #fff;
    }

    #page-content-wrapper {
      display: flex;
      width: 100%;
      min-height: 100vh;
    }

    /* Carousel Principal */
    .carousel {
      position: relative;
      width: 100%;
      height: 60vh;
      overflow: hidden;
      border-radius: 15px;
      margin-bottom: 30px;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      transition: background-image 1s ease-in-out;
    }

    .carousel img {
      display: none; /* Ocultar las im√°genes ya que usaremos background */
    }

    .overlay {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
      z-index: 10;
      background: rgba(0, 0, 0, 0.7);
      padding: 40px;
      border-radius: 15px;
      backdrop-filter: blur(10px);
    }

    .overlay h1 {
      font-size: 4rem;
      color: #b19cd9;
      margin-bottom: 10px;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
    }

    .overlay h1 span {
      color: #6c63ff;
    }

    .overlay p {
      font-size: 1.2rem;
      color: #fff;
      margin: 10px 0;
      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
    }

    /* Estad√≠sticas de Usuario */
    .user-stats {
      background: linear-gradient(135deg, #1e1e1e, #2a2a2a);
      border-radius: 15px;
      padding: 25px;
      margin: 20px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      border: 1px solid #444;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .stat-item {
      background: #333;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      border: 1px solid #555;
    }

    .stat-number {
      font-size: 2.5rem;
      font-weight: bold;
      color: #6c63ff;
      margin-bottom: 10px;
    }

    .stat-label {
      color: #bbb;
      font-size: 0.9rem;
    }

    /* Mis Renders */
    .my-renders {
      margin-top: 30px;
      padding: 30px 20px;
      background: linear-gradient(135deg, #1c1c1c, #2e2e2e);
      border-radius: 15px;
      margin: 20px;
    }

    .my-renders h2 {
      font-size: 2.5rem;
      color: #b19cd9;
      margin-bottom: 30px;
      text-align: center;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .renders-gallery {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 25px;
      justify-content: center;
    }

    /* Estilo para las cartas de renders */
    .render-card {
      background: linear-gradient(135deg, #333, #444);
      border-radius: 15px;
      padding: 20px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
      transition: all 0.3s ease;
      text-align: center;
      color: #fff;
      border: 1px solid #555;
      position: relative;
      overflow: hidden;
    }

    .render-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(108, 99, 255, 0.2), transparent);
      transition: left 0.5s ease;
    }

    .render-card:hover::before {
      left: 100%;
    }

    .render-card img {
      width: 100%;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-bottom: 15px;
      border: 2px solid #555;
      transition: border-color 0.3s ease;
    }

    .render-card:hover img {
      border-color: #6c63ff;
    }

    .render-card h3 {
      font-size: 1.4rem;
      color: #b19cd9;
      margin: 15px 0 10px 0;
      font-weight: bold;
    }

    .render-card .render-info {
      background: rgba(0, 0, 0, 0.3);
      padding: 10px;
      border-radius: 8px;
      margin: 10px 0;
    }

    .render-card .cost {
      font-size: 1.2rem;
      color: #4CAF50;
      font-weight: bold;
      margin: 10px 0;
    }

    .render-card .date {
      font-size: 0.9rem;
      color: #999;
      margin-bottom: 15px;
    }

    .render-card .parameters {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 5px;
      font-size: 0.85rem;
      color: #ccc;
      margin: 10px 0;
    }

    .render-card button {
      padding: 12px 25px;
      background: linear-gradient(135deg, #6c63ff, #574dcf);
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 1rem;
      font-weight: bold;
      transition: all 0.3s ease;
      width: 100%;
    }

    .render-card button:hover {
      background: linear-gradient(135deg, #574dcf, #4b45b1);
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(108, 99, 255, 0.4);
    }

    .render-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 12px 40px rgba(0, 0, 0, 0.6);
    }

    /* Estado sin renders */
    .no-renders {
      text-align: center;
      padding: 60px 20px;
      color: #888;
    }

    .no-renders h3 {
      font-size: 1.8rem;
      margin-bottom: 20px;
      color: #b19cd9;
    }

    .no-renders p {
      font-size: 1.1rem;
      margin-bottom: 30px;
    }

    .no-renders .cta-button {
      display: inline-block;
      padding: 15px 30px;
      background: linear-gradient(135deg, #6c63ff, #574dcf);
      color: white;
      text-decoration: none;
      border-radius: 8px;
      font-weight: bold;
      transition: all 0.3s ease;
    }

    .no-renders .cta-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(108, 99, 255, 0.4);
    }

    /* Responsive */
    @media (max-width: 768px) {
      .overlay h1 {
        font-size: 2.5rem;
      }
      
      .renders-gallery {
        grid-template-columns: 1fr;
      }
      
      .stats-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>

<body>
  <div id="page-content-wrapper">
    <!-- Incluir la Sidebar -->
    <div class="col-auto">
      <%- include('./partials/sidebar.ejs') %>
    </div>
    
    <div class="col">
      <!-- Carousel Principal -->
      <div class="carousel" id="carousel">
        <div class="overlay">
          <h1>RENDER<span>IA</span></h1>
          <p>¬°Hola, <strong><%= usuario.nombreUsuario %></strong>!</p>
          <% if (usuario.esPremium) { %>
            <p>üåü Usuario Premium - Renders ilimitados disponibles</p>
          <% } else { %>
            <p>üìä Usuario Gratuito - <%= Math.max(0, 3 - usuario.rendersGratuitos) %> renders restantes</p>
          <% } %>
          <p>Crea renders fotorealistas en un lapso de 15 segundos usando IA</p>
        </div>
      </div>

      <!-- Estad√≠sticas del Usuario -->
      <div class="user-stats">
        <h2>üìä Estad√≠sticas de tu Cuenta</h2>
        <div class="stats-grid">
          <div class="stat-item">
            <div class="stat-number"><%= proyectos ? proyectos.length : 0 %></div>
            <div class="stat-label">Renders Generados</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">
              <% if (usuario.esPremium) { %>
                ‚àû
              <% } else { %>
                <%= usuario.rendersGratuitos %>
              <% } %>
            </div>
            <div class="stat-label">Renders Utilizados</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">
              <% if (usuario.esPremium) { %>
                Premium
              <% } else { %>
                Gratuito
              <% } %>
            </div>
            <div class="stat-label">Tipo de Cuenta</div>
          </div>
          <div class="stat-item">
            <div class="stat-number"><%= usuario.tipoUsuario || 'General' %></div>
            <div class="stat-label">Profesi√≥n</div>
          </div>
        </div>
      </div>

      <!-- Mis Renders -->
      <div class="my-renders">
        <h2>üé® Mis Renders</h2>
        
        <% if (proyectos && proyectos.length > 0) { %>
          <div class="renders-gallery">
            <% proyectos.forEach(function(proyecto) { %>
              <div class="render-card">
                <% if (proyecto.urlImagen) { %>
                  <img src="<%= proyecto.urlImagen %>" alt="<%= proyecto.titulo || 'Render' %>" loading="lazy" onclick="viewRender('<%= proyecto._id %>')">
                <% } else { %>
                  <div style="width: 100%; height: 180px; background-color: #444; display: flex; align-items: center; justify-content: center; border-radius: 10px;">
                    <span style="color: #888;">Sin imagen</span>
                  </div>
                <% } %>
                
                <h3><%= proyecto.titulo || 'Sin t√≠tulo' %></h3>
                
                <div class="render-info">
                  <% if (proyecto.estimacionCosto) { %>
                    <div class="cost">
                      üí∞ $<%= proyecto.estimacionCosto.toLocaleString() %> USD
                    </div>
                  <% } %>
                  
                  <% if (proyecto.createdAt) { %>
                    <div class="date">
                      üìÖ <%= new Date(proyecto.createdAt).toLocaleDateString('es-ES') %>
                    </div>
                  <% } %>
                  
                  <% if (proyecto.parametros) { %>
                    <div class="parameters">
                      <% if (proyecto.parametros.tama√±o) { %>
                        <span>üìê <%= proyecto.parametros.tama√±o %> m¬≤</span>
                      <% } %>
                      <% if (proyecto.parametros.pisos) { %>
                        <span>üè¢ <%= proyecto.parametros.pisos %> piso(s)</span>
                      <% } %>
                      <% if (proyecto.parametros.estilo) { %>
                        <span>üé® <%= proyecto.parametros.estilo %></span>
                      <% } %>
                      <% if (proyecto.parametros.ambiente) { %>
                        <span>üåø <%= proyecto.parametros.ambiente %></span>
                      <% } %>
                    </div>
                  <% } %>
                </div>
                
                <div style="display: flex; gap: 10px;">
                  <% if (proyecto.urlImagen) { %>
                    <button onclick="downloadImage('<%= proyecto.urlImagen %>', '<%= proyecto.titulo  %>')" style="flex: 1;">
                      üì• Descargar
                    </button>
                    <button onclick="viewRender('<%= proyecto._id %>')" style="flex: 1; background: linear-gradient(135deg, #4CAF50, #45a049);">
                      üëÅÔ∏è Ver
                    </button>
                  <% } else { %>
                    <button disabled style="opacity: 0.5; width: 100%;">
                      ‚ùå No disponible
                    </button>
                  <% } %>
                </div>
              </div>
            <% }); %>
          </div>
        <% } else { %>
          <div class="no-renders">
            <h3>üé® A√∫n no has creado ning√∫n render</h3>
            <p>¬°Comienza ahora y convierte tus bocetos en renders profesionales!</p>
            <a href="/renders" class="cta-button">
              ‚ú® Crear mi primer render
            </a>
          </div>
        <% } %>
      </div>
    </div>
  </div>

  <script>
    // Array de im√°genes para el carousel de fondo
    const backgroundImages = [
      'public/images/casa1.png',
      'public/images/casa2.png',
      'public/images/casa3.png',
      'public/images/casa4.png',
      'public/images/casa5.png',
      'public/images/casa6.png'
    ];

    // Funci√≥n para ver render completo
    function viewRender(renderId) {
      // Redirigir a una p√°gina de vista detallada del render
      window.location.href = `/render/${renderId}`;
    }

    // Funci√≥n para descargar im√°genes (descarga directa)
    function downloadImage(imageSrc, fileName = 'render') {
      if (!imageSrc) {
        alert('‚ùå Error: No hay imagen para descargar');
        return;
      }
      
      try {
        // Crear un enlace temporal y forzar descarga
        fetch(imageSrc)
          .then(response => response.blob())
          .then(blob => {
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.style.display = 'none';
            link.href = url;
            link.download = `${fileName}_${Date.now()}.png`;
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // Limpiar el URL objeto
            window.URL.revokeObjectURL(url);
            
            // Feedback visual
            event.target.innerHTML = '‚úÖ Descargado';
            setTimeout(() => {
              event.target.innerHTML = 'üì• Descargar';
            }, 2000);
          })
          .catch(error => {
            console.error('Error descargando imagen:', error);
            // Fallback: m√©todo tradicional
            const link = document.createElement('a');
            link.href = imageSrc;
            link.download = `${fileName}_${Date.now()}.png`;
            link.target = '_blank';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          });
        
      } catch (error) {
        console.error('Error descargando imagen:', error);
        alert('‚ùå Error al descargar la imagen');
      }
    }

    // Carousel de fondo autom√°tico
    document.addEventListener('DOMContentLoaded', function() {
      const carousel = document.getElementById('carousel');
      let currentIndex = 0;
      
      // Establecer imagen inicial
      carousel.style.backgroundImage = `url('${backgroundImages[0]}')`;
      
      function nextBackground() {
        currentIndex = (currentIndex + 1) % backgroundImages.length;
        carousel.style.backgroundImage = `url('${backgroundImages[currentIndex]}')`;
      }
      
      // Cambiar imagen de fondo cada 4 segundos
      setInterval(nextBackground, 4000);
    });

    // Animaci√≥n de contadores
    document.addEventListener('DOMContentLoaded', function() {
      const statNumbers = document.querySelectorAll('.stat-number');
      
      statNumbers.forEach(stat => {
        const finalValue = stat.textContent;
        if (!isNaN(finalValue) && finalValue !== '‚àû') {
          stat.textContent = '0';
          let current = 0;
          const target = parseInt(finalValue);
          const increment = target / 30;
          
          const timer = setInterval(() => {
            current += increment;
            if (current >= target) {
              stat.textContent = target;
              clearInterval(timer);
            } else {
              stat.textContent = Math.floor(current);
            }
          }, 50);
        }
      });
    });

    // Lazy loading para im√°genes
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            img.src = img.dataset.src || img.src;
            img.classList.remove('lazy');
            observer.unobserve(img);
          }
        });
      });

      document.querySelectorAll('.render-card img[loading="lazy"]').forEach(img => {
        imageObserver.observe(img);
      });
    }

    // Agregar cursor pointer a las im√°genes clickeables
    document.addEventListener('DOMContentLoaded', function() {
      document.querySelectorAll('.render-card img').forEach(img => {
        img.style.cursor = 'pointer';
        img.title = 'Click para ver en detalle';
      });
    });
  </script>
</body>

</html>